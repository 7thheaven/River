/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        vector<Interval> res;
        int i(0);
        while(i<intervals.size() && intervals[i].end<newInterval.start)
            res.push_back(intervals[i++]);
        if(i==intervals.size())
            res.push_back(newInterval);
        else
        {
            if(intervals[i].start>newInterval.end)
            {
                res.push_back(newInterval);
                for(;i<intervals.size();++i)
                    res.push_back(intervals[i]);
                return res;
            }
            int beg(min(newInterval.start,intervals[i].start)),end;
            while(i<intervals.size() && intervals[i].start<=newInterval.end)
                ++i;
            if(!i)
                ++i;
            end=max(newInterval.end,intervals[i-1].end);
            Interval con(beg,end);
            res.push_back(con);
            for(;i<intervals.size();++i)
                res.push_back(intervals[i]);
        }
        return res;
    }
};