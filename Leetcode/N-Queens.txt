class Solution {
public:
    bool can(const vector<int> &col,const int & row)
    {
        for(int j(0);j<row;++j)
            if(abs(col[row]-col[j])==abs(row-j))
                return false;
        return true;
    }
    void enu(vector<vector<string> > &res,vector<int> col,int row,int n)
    {
        if(row==n)
        {
            vector<string> now;
            for(int i(0);i<n;++i)
            {
                string temp(n,'.');
                temp[col[i]]='Q';
                now.push_back(temp);
            }
            res.push_back(now);
            return;
        }
        for(int i(row);i<n;++i)
        {
            swap(col[i],col[row]);
            if(can(col,row))
                enu(res,col,row+1,n);
            swap(col[i],col[row]);
        }
    }
    vector<vector<string> > solveNQueens(int n) {
        vector<vector<string> > res;
        if(!n)
            return res;
        vector<int> col;
        for(int i(0);i<n;++i)
            col.push_back(i);
        enu(res,col,0,n);
        return res;
    }
};