class Solution {
public:
    map<vector<int>,int> has;
    void get(vector<int> now,const vector<int> &candidates,int sum,const int &target,vector<vector<int> > &res,int index)
    {
        int temp;
        for(int i=index;i<candidates.size();++i){
        if(sum+candidates[i]==target)
        {
            now.push_back(candidates[i]);
            if(has.count(now)==0)
            {
                has[now]=1;
                res.push_back(now);
            }
            now.erase(now.end()-1);
        }
        else if(sum+candidates[i]<target)
        {
            now.push_back(candidates[i]);
            get(now,candidates,sum+candidates[i],target,res,i+1);
            now.erase(now.end()-1);
        }
        }
    }
    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        vector<vector<int> > res;
        if(num.empty())
            return res;
        sort(num.begin(),num.end());
        vector<int> temp;
        get(temp,num,0,target,res,0);
        return res;
    }
};