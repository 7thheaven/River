class Solution {
public:
    ListNode *merge(ListNode *l1, int len, ListNode *nex) {
        ListNode *l2(l1),*tail(nex);
        int i(0);
        while(++i<=len && l2)
            l2=l2->next;
        if(!l2)
        {
            nex->next=l1;
            return NULL;
        }
        int l1count(0),l2count(0);
        while(true)
        {
            if(l1count>=len)
            {
                tail->next=l2;
                while(++l2count<len && l2)
                    l2=l2->next;
                return l2;
            }
            if(!l2 || l2count>=len)
            {
                tail->next=l1;
                while(++l1count<len)
                    l1=l1->next;
                l1->next=l2;
                return l1;
            }
            if(l1->val<=l2->val)
            {
                tail->next=l1;
                tail=l1;
                l1=l1->next;
                ++l1count;
            }
            else
            {
                tail->next=l2;
                tail=l2;
                l2=l2->next;
                ++l2count;
            }
        }
    }
    ListNode *sortList(ListNode *head) {
        ListNode *temp(head),*res=new ListNode(7),*tail;
        int len(0);
        while(temp)
        {
            ++len;
            temp=temp->next;
        }
        if(len<2)
            return head;
        int i(1);  //merge lenth
        tail=res;  //last sorted node
        res->next=head;
        while(i<=len)
        {
            temp=res->next;  //first need to sort
            tail=res;
            while(temp)
            {
                temp=merge(temp,i,tail);
                tail=temp;
                if(temp)
                    temp=temp->next;
            }
            i*=2;
        }
        return res->next;
    }
};