class Solution {
public:
    void has(TreeNode *root,int sum,const int & target,vector<int> now,vector<vector<int> > &res)
    {
        if(!root->left && !root->right && (sum+root->val)==target)
        {
            now.push_back(root->val);
            res.push_back(now);
        }
        if(root->left)
        {
            now.push_back(root->val);
            has(root->left,sum+root->val,target,now,res);
            now.erase(now.end()-1);
        }
        if(root->right)
        {
            now.push_back(root->val);
            has(root->right,sum+root->val,target,now,res);
        }
    }
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        vector<vector<int> > res;
        if(!root)
            return res;
        vector<int> a;
        has(root,0,sum,a,res);
        return res;
    }
};